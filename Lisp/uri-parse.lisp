(defun identificator% (list &optional delimitators accumulator)
  (when list
    (if (member (first list) delimitators)
    (values (nreverse accumulator) list)
      (identificator% (rest list)
              delimitators
              (cons (car list) accumulator)))))

(defun identificator (list delimitator)
  (let ((parse (multiple-value-list (identificator% list delimitator))))
    (if (first parse)
        (values-list parse)
      (values nil list))))

(defun scheme (list)
  (multiple-value-bind (schema rest)
    (identificator list '(#\:))
    (values (cons 'uri-scheme schema) rest)
  )
)

(defun userinfo (list)
  (multiple-value-bind (schema rest)
    (identificator list '(#\@))
    (values (cons 'uri-userinfo schema) rest)
  )
)

(defun host (list)
  (multiple-value-bind (schema rest)
      (identificator list '(#\: #\/ eof))
      (values (cons 'uri-host schema) rest)
    )
)

(defun port (list)
   (if (not (eq (first list) #\:))
      (values (list 'uri-port) list)
      (multiple-value-bind (parsed remaining)
        (identificator list '(#\/ eof))
        (values (list 'uri-port (rest parsed)) remaining)
      )
  )
)

(defun path (list)
  (multiple-value-bind (parsed rest)
    (identificator list '(#\? #\# eof))
    (values (list 'uri-path parsed) rest)
  )
)

(defun query (list)
  (if (not (eq (first list) #\?))
    (values (list 'uri-query) list)
    (multiple-value-bind (parsed rest)
      (identificator list '(#\# eof))
      (values (list 'uri-query parsed) rest)
    )
  )
)

(defun fragment (list)
  (if (not (eq (first list) #\#))
      (values (list 'uri-fragment) list)
      (multiple-value-bind (parsed rest)
        (identificator list '(eof))
        (values (list 'uri-fragment parsed) rest)
    )
  )
)

(defun authority (list)
  (cond 
    ((and (eq (second list) #\/) (eq (third list) #\/)) 
      (let* (
        (parsedUserInfo (multiple-value-list (userinfo (cdr (cdr (cdr list))))))
        (parsedHost (multiple-value-list (host (second parsedUserInfo))))
        (parsedPort (multiple-value-list (port (second parsedHost)))))
        (values (list (first parsedUserInfo) (first parsedHost) (first parsedPort)) (second parsedPort))
      ))
  )
)

(defun uri-parse_ (InputString)
  (let (
    (streamed (append (coerce InputString 'list) '(eof))))
    (let* (
        (parsedSchema (multiple-value-list (scheme streamed)))
        (parsedAuthority (multiple-value-list (authority (second parsedSchema))))
        (parsedPath (multiple-value-list (path (second parsedAuthority))))
        (parsedQuery (multiple-value-list (query (second parsedPath))))
        (parsedFragment (multiple-value-list (fragment (second parsedQuery)))))
        (list 
          (first parsedSchema)
          (first parsedAuthority)
          (first parsedPath)
          (first parsedQuery)
          (first parsedFragment)
        )
    )
  )
)